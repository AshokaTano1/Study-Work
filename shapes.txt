def __SaveFolderStructure(folderFrom, folderTo, userFrom, userTo, idTab):
    # Вспомогательная функция для копирования ссылок и папок
    def copy_links_and_subfolders(links_queryset, folders_queryset):
        for link in links_queryset:
            link.pk = None
            link.user = userTo
            link.inFolder = folderTo
            with transaction.atomic():
                link.save()

        for folder in folders_queryset:
            folder.pk = None
            folder.user = userTo
            folder.inFolder = folderTo
            with transaction.atomic():
                folder.save()

            # Рекурсивно копируем вложенные папки
            __SaveFolderStructure(folder, folder, userFrom, userTo, idTab)

    if idTab == 0:  # Копируем все ссылки и папки для всех idTab
        copy_links_and_subfolders(Link.objects.filter(user=userFrom, inFolder=folderFrom),
                                  Folder.objects.filter(user=userFrom, inFolder=folderFrom))
    elif idTab == 1:  # Копируем ссылки и папки с idTab=1
        copy_links_and_subfolders(Link.objects.filter(user=userFrom, inFolder=folderFrom, idTab=1),
                                  Folder.objects.filter(user=userFrom, inFolder=folderFrom, idTab=1))
    elif idTab == 2:  # Копируем ссылки и папки с idTab=2
        copy_links_and_subfolders(Link.objects.filter(user=userFrom, inFolder=folderFrom, idTab=2),
                                  Folder.objects.filter(user=userFrom, inFolder=folderFrom, idTab=2))


def copy_profile(userTo, userFrom, idTab):
    Link.objects.filter(user=userTo).delete()
    Folder.objects.filter(user=userTo).delete()

    # Вспомогательная функция для копирования ссылок и папок
    def copy_links_and_folders(links_queryset, folders_queryset):
        for link in links_queryset:
            link.pk = None
            link.user = userTo
            link.inFolder = None
            with transaction.atomic():
                link.save()

        for folder in folders_queryset:
            folder.pk = None
            folder.user = userTo
            folder.inFolder = None
            with transaction.atomic():
                folder.save()
            __SaveFolderStructure(folder, folder, userFrom, userTo, idTab)

    if idTab == 0:  # Копирование всех данных
        # Копируем все ссылки и папки для всех idTab
        copy_links_and_folders(Link.objects.filter(user=userFrom), Folder.objects.filter(user=userFrom))

    elif idTab == 1:  # Копирование только для idTab=1
        # Копируем только ссылки и папки с idTab=1
        copy_links_and_folders(Link.objects.filter(user=userFrom, idTab=1), Folder.objects.filter(user=userFrom, idTab=1))

    elif idTab == 2:  # Копирование только для idTab=2
        # Копируем только ссылки и папки с idTab=2
        copy_links_and_folders(Link.objects.filter(user=userFrom, idTab=2), Folder.objects.filter(user=userFrom, idTab=2))
