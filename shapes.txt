# Общая модель для всех плиток
class PlitkaAbstract(models.Model):
    def get_default_border():
        return {"color": "#ffffff", "style": "solid", "size": 1}

    def get_default_font():
        return {"color": "#ffffff", "style": "normal"}
    
    # Пользователь, которому принадлежит Плитка
    user = models.ForeignKey(to=User, on_delete=models.CASCADE, null=False)
    # Ширина Плитки
    w = models.PositiveIntegerField(null=False, default=1) 
    # Высота Плитки
    h = models.PositiveIntegerField(null=False, default=1)
    # Координата по горизонтали в расположении общей страницы отображения Плиток (включает все страницы)
    dashboardX = models.PositiveIntegerField(null=False)
    # Координата по вертикали. Максимальное значение - 7
    y = models.PositiveIntegerField(validators=[
        MaxValueValidator(8)
        ], null=False)
    # Цвет Плитки
    color = models.CharField(null=False, max_length=7, default='default')
    # Граница Плитки вида:
    # {
    #     "color": "#ffffff",    - Цвет границы
    #     "style": "solid",      - Стиль границы 
    #     "size": 1              - Толщина границы
    # }
    border = models.JSONField(null=False, default=get_default_border)
    # Шрифт Плитки вида:
    # {
    #     "color": "#d6dff1",    - Цвет шрифта
    #     "style": "normal"      - Стиль шрифта
    # }
    font = models.JSONField(null=False, default=get_default_font)
    # Текст Плитки
    title = models.TextField(null=False)
    idTab = models.IntegerField(choices=[(0, "Все вкладки"), (1,"Н"), (2,"НЗ-1")])              #(blank=True, default=0, null=False)
    # Дополнительное описание
    description = models.TextField(blank=True, null=True)
    
    class Meta:
        abstract = True
        
class Folder(PlitkaAbstract):
    # Ссылка на родительскую папку (NULL обозначает, что объект находится в "корневом каталоге". 
    # Заданное значение, обозначает, что объект находится в заданном родительском каталоге)
    inFolder = models.ForeignKey('self', blank=True, null=True, on_delete=models.CASCADE, verbose_name=_('Folder'))
    
    def __str__(self):
        return f"{self.id}: {self.title}"

class Link(PlitkaAbstract):
    # Ссылка на объект
    url = models.URLField(null=True, blank=True)
    # Ссылка на родительскую папку (NULL обозначает, что объект находится в "корневом каталоге". 
    # Заданное значение, обозначает, что объект находится в заданном каталоге)
    inFolder = models.ForeignKey(Folder, blank=True, null=True, on_delete=models.CASCADE, verbose_name=_('Folder'))
    # Хэш файла для получаемого со шлюза 
    gateFileHash = models.CharField(max_length=32, blank=True, null=True, verbose_name=_('Hash'))
    # Параметр, отвечающий за включение отображения обновления файла.
    gateCheckFile = models.BooleanField(blank=True, null=True)
   
    def __str__(self):
